[
    {
        "id": "f1",
        "type": "tab",
        "label": "Forest Fire Detection Flow",
        "disabled": false,
        "info": "Main processing flow for forest fire detection system data ingestion, processing, and alert generation."
    },
    {
        "id": "mqtt-broker",
        "type": "mqtt-broker",
        "name": "Forest Fire MQTT Broker",
        "broker": "mqtt-broker",
        "port": "1883",
        "clientid": "node-red-gateway",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "forest-fire/gateway/status",
        "birthQos": "1",
        "birthPayload": "{\"status\": \"online\", \"timestamp\": ${timestamp}}",
        "closeTopic": "forest-fire/gateway/status",
        "closeQos": "1",
        "closePayload": "{\"status\": \"offline\", \"timestamp\": ${timestamp}}",
        "willTopic": "forest-fire/gateway/status",
        "willQos": "1",
        "willPayload": "{\"status\": \"offline\", \"timestamp\": ${timestamp}}"
    },
    {
        "id": "influxdb-config",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": "8086",
        "protocol": "http",
        "database": "forest-fire-db",
        "name": "Forest Fire InfluxDB",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "sensor-data-input",
        "type": "mqtt in",
        "z": "f1",
        "name": "Sensor Data Input",
        "topic": "forest-fire/nodes/+/data",
        "qos": "1",
        "datatype": "json",
        "broker": "mqtt-broker",
        "x": 150,
        "y": 100,
        "wires": [[
            "data-validation"
        ]]
    },
    {
        "id": "data-validation",
        "type": "function",
        "z": "f1",
        "name": "Data Validation",
        "func": "// Validate incoming sensor data\nconst data = msg.payload;\nconst topic = msg.topic;\n\n// Extract node ID from topic\nconst nodeId = topic.split('/')[2];\ndata.nodeId = nodeId;\n\n// Validate required fields\nif (!data.temperature || !data.humidity || data.smoke === undefined || data.co === undefined) {\n    node.warn('Invalid sensor data received: missing required fields');\n    return null;\n}\n\n// Validate data ranges\nif (data.temperature < -40 || data.temperature > 125) {\n    node.warn('Temperature out of valid range: ' + data.temperature);\n    return null;\n}\n\nif (data.humidity < 0 || data.humidity > 100) {\n    node.warn('Humidity out of valid range: ' + data.humidity);\n    return null;\n}\n\nif (data.smoke < 0 || data.smoke > 10000) {\n    node.warn('Smoke reading out of valid range: ' + data.smoke);\n    return null;\n}\n\nif (data.co < 0 || data.co > 1000) {\n    node.warn('CO reading out of valid range: ' + data.co);\n    return null;\n}\n\n// Add timestamp if not present\nif (!data.timestamp) {\n    data.timestamp = new Date().toISOString();\n}\n\n// Add processing timestamp\ndata.processedAt = new Date().toISOString();\n\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 350,
        "y": 100,
        "wires": [[
            "risk-assessment",
            "influxdb-storage"
        ]]
    },
    {
        "id": "risk-assessment",
        "type": "function",
        "z": "f1",
        "name": "Fire Risk Assessment",
        "func": "// Enhanced fire risk calculation with weighted factors\nconst data = msg.payload;\n\n// Risk calculation weights (configurable)\nconst weights = {\n    temperature: 0.25,\n    humidity: 0.15,\n    smoke: 0.35,\n    co: 0.15,\n    flame: 0.10\n};\n\n// Risk thresholds\nconst thresholds = {\n    temperature: { low: 30, moderate: 40, high: 50, critical: 60 },\n    humidity: { high: 60, moderate: 40, low: 20, critical: 10 }, // Inverse relationship\n    smoke: { low: 50, moderate: 100, high: 200, critical: 400 },\n    co: { low: 10, moderate: 35, high: 70, critical: 150 },\n    flame: { detected: 1 }\n};\n\n// Calculate individual risk scores (0-1)\nlet tempScore = 0;\nif (data.temperature > thresholds.temperature.critical) tempScore = 1;\nelse if (data.temperature > thresholds.temperature.high) tempScore = 0.8;\nelse if (data.temperature > thresholds.temperature.moderate) tempScore = 0.6;\nelse if (data.temperature > thresholds.temperature.low) tempScore = 0.4;\nelse tempScore = Math.max((data.temperature - 20) / 30, 0);\n\nlet humidityScore = 0;\nif (data.humidity < thresholds.humidity.critical) humidityScore = 1;\nelse if (data.humidity < thresholds.humidity.low) humidityScore = 0.8;\nelse if (data.humidity < thresholds.humidity.moderate) humidityScore = 0.6;\nelse if (data.humidity < thresholds.humidity.high) humidityScore = 0.4;\nelse humidityScore = Math.max((60 - data.humidity) / 60, 0);\n\nlet smokeScore = 0;\nif (data.smoke > thresholds.smoke.critical) smokeScore = 1;\nelse if (data.smoke > thresholds.smoke.high) smokeScore = 0.8;\nelse if (data.smoke > thresholds.smoke.moderate) smokeScore = 0.6;\nelse if (data.smoke > thresholds.smoke.low) smokeScore = 0.4;\nelse smokeScore = Math.min(data.smoke / 100, 1);\n\nlet coScore = 0;\nif (data.co > thresholds.co.critical) coScore = 1;\nelse if (data.co > thresholds.co.high) coScore = 0.8;\nelse if (data.co > thresholds.co.moderate) coScore = 0.6;\nelse if (data.co > thresholds.co.low) coScore = 0.4;\nelse coScore = Math.min(data.co / 35, 1);\n\nlet flameScore = data.flame ? 1 : 0;\n\n// Calculate weighted risk score\nconst riskScore = \n    (tempScore * weights.temperature) +\n    (humidityScore * weights.humidity) +\n    (smokeScore * weights.smoke) +\n    (coScore * weights.co) +\n    (flameScore * weights.flame);\n\n// Determine risk level (0-5)\nlet riskLevel = 0;\nif (riskScore >= 0.9) riskLevel = 5; // Extreme\nelse if (riskScore >= 0.7) riskLevel = 4; // Critical\nelse if (riskScore >= 0.5) riskLevel = 3; // High\nelse if (riskScore >= 0.3) riskLevel = 2; // Moderate\nelse if (riskScore >= 0.1) riskLevel = 1; // Low\nelse riskLevel = 0; // Normal\n\n// Add risk assessment to payload\ndata.riskScore = Math.round(riskScore * 1000) / 1000; // Round to 3 decimal places\ndata.riskLevel = riskLevel;\ndata.riskComponents = {\n    temperature: Math.round(tempScore * 1000) / 1000,\n    humidity: Math.round(humidityScore * 1000) / 1000,\n    smoke: Math.round(smokeScore * 1000) / 1000,\n    co: Math.round(coScore * 1000) / 1000,\n    flame: flameScore\n};\n\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 100,
        "wires": [[
            "alert-router"
        ]]
    },
    {
        "id": "alert-router",
        "type": "switch",
        "z": "f1",
        "name": "Alert Level Router",
        "property": "payload.riskLevel",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "4",
                "vt": "num"
            },
            {
                "t": "gte",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 750,
        "y": 100,
        "wires": [[
            "critical-alert"
        ], [
            "warning-alert"
        ], [
            "normal-logging"
        ]]
    },
    {
        "id": "critical-alert",
        "type": "function",
        "z": "f1",
        "name": "Critical Alert Generator",
        "func": "const data = msg.payload;\n\n// Create critical alert message\nconst alert = {\n    type: 'CRITICAL_FIRE_ALERT',\n    severity: 'CRITICAL',\n    nodeId: data.nodeId,\n    location: data.location || 'Unknown',\n    timestamp: new Date().toISOString(),\n    riskLevel: data.riskLevel,\n    riskScore: data.riskScore,\n    sensorData: {\n        temperature: data.temperature,\n        humidity: data.humidity,\n        smoke: data.smoke,\n        co: data.co,\n        flame: data.flame\n    },\n    message: `CRITICAL FIRE RISK DETECTED at Node ${data.nodeId}. Risk Level: ${data.riskLevel}/5. Immediate action required!`,\n    actions: ['SMS', 'EMAIL', 'DASHBOARD_ALERT', 'AUDIO_ALARM']\n};\n\nmsg.payload = alert;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 970,
        "y": 60,
        "wires": [[
            "sms-notification",
            "email-notification",
            "dashboard-alert"
        ]]
    },
    {
        "id": "warning-alert",
        "type": "function",
        "z": "f1",
        "name": "Warning Alert Generator",
        "func": "const data = msg.payload;\n\n// Create warning alert message\nconst alert = {\n    type: 'FIRE_WARNING',\n    severity: 'WARNING',\n    nodeId: data.nodeId,\n    location: data.location || 'Unknown',\n    timestamp: new Date().toISOString(),\n    riskLevel: data.riskLevel,\n    riskScore: data.riskScore,\n    sensorData: {\n        temperature: data.temperature,\n        humidity: data.humidity,\n        smoke: data.smoke,\n        co: data.co,\n        flame: data.flame\n    },\n    message: `Fire risk warning at Node ${data.nodeId}. Risk Level: ${data.riskLevel}/5. Monitor conditions closely.`,\n    actions: ['DASHBOARD_ALERT', 'LOG']\n};\n\nmsg.payload = alert;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 970,
        "y": 100,
        "wires": [[
            "dashboard-alert"
        ]]
    },
    {
        "id": "normal-logging",
        "type": "debug",
        "z": "f1",
        "name": "Normal Data Log",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 140,
        "wires": []
    },
    {
        "id": "influxdb-storage",
        "type": "influxdb out",
        "z": "f1",
        "influxdb": "influxdb-config",
        "name": "Store Sensor Data",
        "measurement": "sensor_data",
        "precision": "ms",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "writeType": "field",
        "x": 350,
        "y": 180,
        "wires": []
    },
    {
        "id": "sms-notification",
        "type": "http request",
        "z": "f1",
        "name": "SMS Alert Service",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://api-service:3001/api/notifications/sms",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1200,
        "y": 40,
        "wires": [[
            "notification-log"
        ]]
    },
    {
        "id": "email-notification",
        "type": "http request",
        "z": "f1",
        "name": "Email Alert Service",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://api-service:3001/api/notifications/email",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 1200,
        "y": 80,
        "wires": [[
            "notification-log"
        ]]
    },
    {
        "id": "dashboard-alert",
        "type": "mqtt out",
        "z": "f1",
        "name": "Dashboard Alert",
        "topic": "forest-fire/alerts/dashboard",
        "qos": "1",
        "retain": "false",
        "broker": "mqtt-broker",
        "x": 1200,
        "y": 120,
        "wires": []
    },
    {
        "id": "notification-log",
        "type": "debug",
        "z": "f1",
        "name": "Notification Log",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 60,
        "wires": []
    },
    {
        "id": "node-status-input",
        "type": "mqtt in",
        "z": "f1",
        "name": "Node Status Updates",
        "topic": "forest-fire/nodes/+/status",
        "qos": "1",
        "datatype": "json",
        "broker": "mqtt-broker",
        "x": 150,
        "y": 250,
        "wires": [[
            "status-processor"
        ]]
    },
    {
        "id": "status-processor",
        "type": "function",
        "z": "f1",
        "name": "Node Status Processor",
        "func": "// Process node status updates\nconst status = msg.payload;\nconst topic = msg.topic;\n\n// Extract node ID from topic\nconst nodeId = topic.split('/')[2];\nstatus.nodeId = nodeId;\nstatus.lastSeen = new Date().toISOString();\n\n// Validate status fields\nif (!status.batteryLevel && status.batteryLevel !== 0) {\n    status.batteryLevel = 0;\n}\n\nif (!status.signalStrength) {\n    status.signalStrength = -999;\n}\n\nif (!status.status) {\n    status.status = 'unknown';\n}\n\n// Send to database update service\nmsg.payload = status;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 370,
        "y": 250,
        "wires": [[
            "status-update-api"
        ]]
    },
    {
        "id": "status-update-api",
        "type": "http request",
        "z": "f1",
        "name": "Update Node Status",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://api-service:3001/api/nodes/{{payload.nodeId}}/status",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 590,
        "y": 250,
        "wires": [[
            "status-update-log"
        ]]
    },
    {
        "id": "status-update-log",
        "type": "debug",
        "z": "f1",
        "name": "Status Update Log",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 250,
        "wires": []
    }
]